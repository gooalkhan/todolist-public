{"version":3,"sources":["component/Modal.js","redux/action.js","component/Todo.js","App.js","serviceWorker.js","redux/reducer.js","index.js"],"names":["FormModal","props","useState","title","body","todo","keyStroke","dispatch","useDispatch","todos","useSelector","state","useEffect","modId","modTodo","filter","item","id","Modal","show","onHide","handleClose","Header","closeButton","Title","Body","Form","Group","Label","Control","placeholder","onChange","e","target","value","Footer","Button","variant","onClick","type","modifyTodo","setModId","addTodo","saveHandler","Todo","ref","useRef","useDrag","collect","monitor","isDragging","drag","useDrop","accept","hover","dragId","hoverId","hoverBoundingRect","current","getBoundingClientRect","hoverMiddleY","bottom","top","hoverClientY","getClientOffset","y","dropId","dndTodo","drop","Col","xl","lg","md","sm","xs","className","Card","Row","ButtonGroup","size","style","handleShow","App","setShow","Container","fluid","length","map","key","right","dndApp","DndProvider","backend","HTML5Backend","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","initTodo","store","createStore","action","maxId","maxBy","push","modifiedIndex","findIndex","splice","dragIndex","dropIndex","dragItem","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.1995f68f.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { Modal, Button, Form } from 'react-bootstrap';\nimport { addTodo, modifyTodo } from '../redux/action'\n\nexport const FormModal = (props) => {\n    const [todo, keyStroke] = useState({ title: '', body: '' })\n    const dispatch = useDispatch()\n    const todos = useSelector(state => state.todos)\n\n    useEffect(() => {\n        if (props.modId) {\n            const modTodo = todos.filter((item) => item.id === props.modId)  \n            keyStroke(...modTodo)\n        }        \n        return () => {\n        }\n    }, [props.modId, todos])\n\n    const saveHandler = (todo) => {\n        if(props.modId) {\n            dispatch(modifyTodo(props.modId, {...todo}))\n            props.setModId(null)\n        } else {\n            dispatch(addTodo({...todo}))\n        }\n        keyStroke({title:'', body:''})\n        props.handleClose();\n    }\n\n    const closeHandler = () => {\n        keyStroke({title:'', body:''})\n        props.handleClose();\n    }\n\n    return (\n        <Modal show={props.show} onHide={props.handleClose}>\n            <Modal.Header closeButton>\n                <Modal.Title>할 일 입력</Modal.Title>\n            </Modal.Header>\n            <Modal.Body>\n                <Form>\n                    <Form.Group>\n                        <Form.Label>제목</Form.Label>\n                        <Form.Control\n                            placeholder=\"제목을 입력하세요\"\n                            onChange={e => { keyStroke({ ...todo, title: e.target.value }) }}\n                            value={todo.title} />\n                    </Form.Group>\n                    <Form.Group>\n                        <Form.Label>할 일</Form.Label>\n                        <Form.Control\n                            placeholder=\"할 일을 입력하세요\"\n                            onChange={e => { keyStroke({ ...todo, body: e.target.value }) }}\n                            value={todo.body} />\n                    </Form.Group>\n                </Form>\n            </Modal.Body>\n            <Modal.Footer>\n                <Button variant=\"secondary\"\n                    onClick={closeHandler}>\n                    닫기\n            </Button>\n                <Button variant=\"primary\"\n                    onClick={() => { saveHandler(todo) }}>\n                    저장\n            </Button>\n            </Modal.Footer>\n        </Modal>\n    );\n}","export const modifyTodo = (id, todo) => {\n    \n    return {\n        type: \"MODIFY_TODO\",\n        id, \n        todo}\n}\n\nexport const addTodo = (todo) => {\n    \n    return {\n        type: \"ADD_TODO\",\n        todo}\n}\n\nexport const deleteTodo = (id) => {\n    return {\n        type: \"DELETE_TODO\",\n        id\n    }\n}\n\nexport const dndTodo = (dragId, dropId) => {\n    return {\n        type: \"DND_TODO\", \n        dragId,\n        dropId\n    }\n}","import React, { useRef } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { deleteTodo, dndTodo } from '../redux/action';\nimport { Card, Row, Col, Button, ButtonGroup } from 'react-bootstrap';\nimport { useDrag, useDrop } from 'react-dnd';\n\nexport const Todo = (props) => {\n    const ref = useRef(null)\n    const dispatch = useDispatch()\n    const handleModify = () => {\n        props.handleShow();\n        props.setModId(props.id)\n    }\n\n    const [{ isDragging }, drag] = useDrag({\n        item: { type: \"TODO\", id: props.id },\n        collect: (monitor) => ({\n            isDragging: monitor.isDragging(),\n        }),\n    })\n\n    const [, drop] = useDrop({\n        accept: \"TODO\",\n        hover(item, monitor) {\n            if (ref === null) {\n                return\n            }\n            const dragId = item.id\n            const hoverId = props.id\n\n            if (dragId === hoverId) {\n                return\n            }\n\n            const hoverBoundingRect = ref.current?.getBoundingClientRect()\n            // Get vertical middle\n            const hoverMiddleY =\n                (hoverBoundingRect.bottom - hoverBoundingRect.top) / 2\n            // Determine mouse position\n            const clientOffset = monitor.getClientOffset()\n            // Get pixels to the top\n            const hoverClientY = clientOffset.y - hoverBoundingRect.top\n            // Only perform the move when the mouse has crossed half of the items height\n            // When dragging downwards, only move when the cursor is below 50%\n            // When dragging upwards, only move when the cursor is above 50%\n            // Dragging downwards\n            if (dragId < hoverId && hoverClientY < hoverMiddleY) {\n                return\n            }\n            // Dragging upwards\n            if (dragId > hoverId && hoverClientY > hoverMiddleY) {\n                return\n            }\n\n            dispatch(dndTodo(dragId, hoverId))\n\n            //item.id = hoverId\n        },\n    })\n    drag(drop(ref))\n\n    return (\n        <Col xl={4} lg={6} md={6} sm={12} xs={12} className=\"p-1\" ref={ref}>\n            <Card className={!isDragging ? \"visible\":\"invisible\"}>\n                <Card.Header className=\"container-fluid font-weight-bold\">\n                    <Row>\n                        <Col xs={9} className=\"pt-1\">\n                            {props.title}\n                        </Col>\n                        <ButtonGroup size=\"sm\" style={{ \"maxHeight\": \"2rem\" }} className=\"col-xs-3 ml-auto\">\n                            <Button variant=\"outline-secondary\"\n                                className=\"small font-weight-bold\"\n                                onClick={handleModify}>\n                                수정</Button>\n                            <Button variant=\"secondary\"\n                                className=\"font-weight-bold\"\n                                onClick={() => { dispatch(deleteTodo(props.id)) }}>\n                                &times;\n                            </Button>\n                        </ButtonGroup>\n                    </Row>\n                </Card.Header>\n                <Card.Body>\n                    {props.body}\n                </Card.Body>\n            </Card>\n        </Col >)\n}\n\n","import React, { useState } from 'react'\nimport { Container, Row, Button } from 'react-bootstrap'\nimport { useSelector } from 'react-redux'\nimport { FormModal } from './component/Modal'\nimport { Todo } from './component/Todo.js';\nimport { DndProvider } from 'react-dnd';\nimport { HTML5Backend } from 'react-dnd-html5-backend'\n\nconst App = (props) => {\n    const [show, setShow] = useState(false);\n    const handleClose = () => setShow(false);\n    const handleShow = () => setShow(true);\n    const [modId, setModId] = useState(null)\n    const todos = useSelector(state => state.todos)\n\n    const handleAdd = () => {\n        setModId(null);\n        handleShow();\n    }\n\n    return (\n        <Container fluid className=\"mt-3 clearfix\">\n            <FormModal show={show} modId={modId} setModId={setModId} handleClose={handleClose} />\n            <Row className=\"no-gutters\">\n                {todos.length !== 0 ?\n                    todos.map(item =>\n                        <Todo title={item.title}\n                            body={item.body}\n                            key={item.id}\n                            id={item.id}\n                            setModId={setModId}\n                            handleShow={handleShow} />)\n                    : null}\n\n            </Row>\n            {/* <div class=\"fixed-bottom clearfix\"> */}\n            <Button style={{ right: 50, bottom: 50 }} className=\"position-fixed rounded-circle font-weight-bold\"\n                onClick={handleAdd}\n                show={show}\n                size=\"lg\">\n                +\n                </Button>\n            {/* </div> */}\n        </Container>\n    )\n}\n\nconst dndApp = (props) => {\n    return(\n    <DndProvider backend={HTML5Backend}>\n        <App/>\n    </DndProvider>\n    )}\n\nexport default dndApp;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { maxBy, findIndex } from 'lodash';\n\nconst initTodo = {\n    todos: [\n        \n            {title: \"test1\",\n            body: \"test\",\n            id: 1},\n            {title: \"test2\",\n            body: \"test\",\n            id: 2},\n            {title: \"test3\",\n            body: \"test\",\n            id: 3},\n            {title: \"test4\",\n            body: \"test\",\n            id: 4},\n        \n    ]\n}\n\nexport const appReducer = (state = initTodo, action) => {\n    let todos;\n\n    switch (action.type) {\n\n        case \"ADD_TODO\":\n            let maxId;\n            state.todos.length === 0 ? maxId = 0 :\n                maxId = maxBy(state.todos, \"id\").id\n            todos = [...state.todos]\n            todos.push({ ...action.todo, id: maxId + 1 })\n            console.log(\"add\", todos)\n            return ({\n                ...state,\n                todos\n            })\n\n        case \"MODIFY_TODO\":\n            //todos = state.todos.filter((item) => (item.id !== action.id))\n            todos = [...state.todos]\n            const modifiedIndex = findIndex(state.todos, ['id', action.id])\n            todos.splice(modifiedIndex, 1, { ...action.todo, id: action.id})\n            // todos = sortBy(todos, 'id')\n            console.log(\"modify\", todos)\n            return ({\n                ...state,\n                todos\n            })\n\n        case \"DND_TODO\":\n            const dragIndex = findIndex(state.todos, ['id', action.dragId])\n            let dropIndex = findIndex(state.todos, ['id', action.dropId])\n            const dragItem = state.todos.filter((item) => (item.id === action.dragId))[0]\n            todos = state.todos.filter((item) => (item.id !== action.dragId))\n            console.log(action.dragId, dragItem, \"to be pushed\")\n            console.log(action.dropId, dropIndex, \"to be inserted\")\n            if (dragIndex > dropIndex) {\n            todos.splice(dropIndex, 0, dragItem)\n            } else if (dragIndex < dropIndex && dropIndex === todos.length) {\n            todos.push(dragItem)\n            } else if (dragIndex < dropIndex && dropIndex !== todos.length) {\n            todos.splice(++dropIndex, 0, dragItem)\n            }\n            console.log(todos)\n            return ({\n                ...state,\n                todos\n            })\n\n        case \"DELETE_TODO\":\n            todos = state.todos.filter((item) => (item.id !== action.id))\n            console.log(\"delete\", todos)\n            return ({\n                ...state,\n                todos\n            })\n\n        default:\n            return state\n\n    }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { Provider } from 'react-redux';\nimport { createStore } from 'redux';\nimport { appReducer } from './redux/reducer';\n\nconst store = createStore(appReducer)\n\nReactDOM.render(\n    <Provider store={store}>\n    <App />\n    </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}